import { History } from "src/entities/history.entity"
import { Record } from "src/entities/record.entity"
import { StatusType } from "src/entities/status_type"
import { formatStatusText, formatTweet } from "./tweet"

describe('formatTweet', () => {
  test('simple', () => {
    const history = new History()
    history.id = 1
    history.record = new Record()
    history.record.title = 'ì œëª©'
    history.comment = 'ë‚´ìš©'
    history.status = '1'
    history.status_type = StatusType.WATCHING
    expect(formatTweet(history)).toBe('ì œëª© 1í™”: ë‚´ìš© https://animeta.net/-1')
  })

  test('spoiler', () => {
    const history = new History()
    history.id = 1
    history.record = new Record()
    history.record.title = 'ì œëª©'
    history.comment = 'ë‚´ìš©'
    history.status = '1'
    history.status_type = StatusType.WATCHING
    history.contains_spoiler = true
    expect(formatTweet(history)).toBe('ì œëª© 1í™”: [ðŸ”‡ ë‚´ìš© ëˆ„ì„¤ ê°€ë¦¼] https://animeta.net/-1')
  })

  test('empty comment', () => {
    const history = new History()
    history.id = 1
    history.record = new Record()
    history.record.title = 'ì œëª©'
    history.comment = ''
    history.status = '1'
    history.status_type = StatusType.WATCHING
    expect(formatTweet(history)).toBe('ì œëª© 1í™” https://animeta.net/-1')
  })

  test('long comment', () => {
    const history = new History()
    history.id = 1
    history.record = new Record()
    history.record.title = 'ì œëª©'
    history.comment = 'ã…‹'.repeat(140)
    history.status = '1'
    history.status_type = StatusType.WATCHING
    expect(formatTweet(history)).toBe(`ì œëª© 1í™”: ${'ã…‹'.repeat(109)}â€¦ https://animeta.net/-1`)
  })
})

describe('formatStatusText', () => {
  test('watching + numeric status', () => {
    const history = new History()
    history.status = '1'
    history.status_type = StatusType.WATCHING
    expect(formatStatusText(history)).toBe('1í™”')
  })
  test('watching + non-numeric status', () => {
    const history = new History()
    history.status = '1ê¶Œ'
    history.status_type = StatusType.WATCHING
    expect(formatStatusText(history)).toBe('1ê¶Œ')
  })
  test('watching + empty status', () => {
    const history = new History()
    history.status = ''
    history.status_type = StatusType.WATCHING
    expect(formatStatusText(history)).toBe('ë³´ëŠ” ì¤‘')
  })
  test('finished + numeric status', () => {
    const history = new History()
    history.status = '1'
    history.status_type = StatusType.FINISHED
    expect(formatStatusText(history)).toBe('1í™” (ì™„ë£Œ)')
  })
  test('finished + non-numeric status', () => {
    const history = new History()
    history.status = '1ê¶Œ'
    history.status_type = StatusType.FINISHED
    expect(formatStatusText(history)).toBe('1ê¶Œ (ì™„ë£Œ)')
  })
  test('finished + empty status', () => {
    const history = new History()
    history.status = ''
    history.status_type = StatusType.FINISHED
    expect(formatStatusText(history)).toBe('ì™„ë£Œ')
  })
})
