type Query {
  currentUser: User
  userByName(name: String): User
  timeline(beforeId: ID, count: Int): [Post]
  curatedLists: [CuratedList]
  curatedList(id: ID): CuratedList
  searchWorks(query: String!): SearchWorksResult
}

scalar GraphQLTimestamp

type User {
  id: ID
  name: String
  joinedAt: GraphQLTimestamp
  isTwitterConnected: Boolean
  categories: [Category]
  recordCount: Int
  postCount: Int
}

type Category {
  id: ID
  user: User
  name: String
}

type Post {
  id: ID
  record: Record
  status: String
  comment: String
  user: User
}

enum StatusType {
  FINISHED,
  WATCHING,
  SUSPENDED,
  INTERESTED,
}

type Record {
  id: ID
  statusType: StatusType
  status: String
}

type CuratedList {
  id: ID
  name: String
  works: CuratedListWorkConnection
}

type CuratedListWorkConnection {
  edges: [CuratedListWorkEdge]
  totalCount: Int
}

type CuratedListWorkEdge {
  node: Work
}

type Work {
  id: ID
  title: String
  imageUrl: String
  record: Record
  recordCount: Int
}

type SearchWorksResult {
  edges: [SearchWorksResultEdge!]!
}

type SearchWorksResultEdge {
  node: Work!
  recordCount: Int
}
