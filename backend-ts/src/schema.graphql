type Query {
  currentUser: User
  user(id: ID!): User
  userByName(name: String!): User
  timeline(beforeId: ID, count: Int): [Post]
  curatedLists: [CuratedList]
  curatedList(id: ID): CuratedList
  searchWorks(query: String!): SearchWorksResult
  weeklyWorksChart(limit: Int!): [WorksChartItem!]!
  work(id: ID!): Work
  workByTitle(title: String!): Work
  post(id: ID!): Post
}

interface Node {
  id: ID!
}

scalar GraphQLTimestamp

type User implements Node {
  id: ID!
  name: String
  joinedAt: GraphQLTimestamp
  isTwitterConnected: Boolean
  categories: [Category]
  recordCount: Int
  postCount: Int
  posts(beforeId: ID, count: Int): PostConnection!
}

type Category implements Node {
  id: ID!
  user: User
  name: String
}

type Post implements Node {
  id: ID!
  record: Record
  statusType: StatusType
  status: String
  comment: String
  containsSpoiler: Boolean
  user: User
  updatedAt: GraphQLTimestamp

  work: Work
  episode: Episode
}

enum StatusType {
  FINISHED,
  WATCHING,
  SUSPENDED,
  INTERESTED,
}

type Record implements Node {
  id: ID!
  title: String
  statusType: StatusType
  status: String
}

type CuratedList {
  id: ID
  name: String
  works: CuratedListWorkConnection
}

type CuratedListWorkConnection {
  edges: [CuratedListWorkEdge]
  totalCount: Int
}

type CuratedListWorkEdge {
  node: Work
}

type Work implements Node {
  id: ID!
  title: String
  imageUrl: String
  record: Record
  recordCount: Int
  metadata: WorkMetadata
  episodes: [Episode!]
  episode(episode: Int!): Episode
  posts(beforeId: ID, count: Int, episode: Int): PostConnection!
}

type PostConnection {
  nodes: [Post!]!
  hasMore: Boolean!
}

type Episode {
  number: Int!
  postCount: Int
  userCount: Int
  suspendedUserCount: Int
  posts(beforeId: ID, count: Int): PostConnection!
}

type WorkMetadata {
  periods: [String!]
  studioNames: [String!]
  source: SourceType
  websiteUrl: String
  namuwikiUrl: String
  annUrl: String
  durationMinutes: Int
  schedules: [WorkSchedule!]
}

enum SourceType {
  MANGA,
  ORIGINAL,
  LIGHT_NOVEL,
  GAME,
  FOUR_KOMA,
  VISUAL_NOVEL,
  NOVEL,
}

type WorkSchedule {
  country: String!
  date: GraphQLTimestamp
  datePrecision: DatePrecision
  broadcasts: [String!]
}

enum DatePrecision {
  YEAR_MONTH,
  DATE,
  DATE_TIME,
}

type SearchWorksResult {
  edges: [SearchWorksResultEdge!]!
}

type SearchWorksResultEdge {
  node: Work!
  recordCount: Int
}

type WorksChartItem {
  rank: Int!
  work: Work!
  diff: Int
  sign: Int
}
