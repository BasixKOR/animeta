import * as Types from '../../__generated__/globalTypes';

import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
import { GqlWorkViewsFragmentDoc, GqlWorkViews_MorePostsFragmentDoc, GqlWorkViews_EpisodeFragmentDoc } from '../../ui/__generated__/GqlWorkViews.graphql';
import { WeeklyChartFragmentDoc } from '../../ui/__generated__/GqlWeeklyChart.graphql';
export type WorkEpisodeRouteQueryVariables = Types.Exact<{
  title: Types.Scalars['String'];
  episode: Types.Scalars['Int'];
}>;


export type WorkEpisodeRouteQuery = { __typename?: 'Query', work?: { __typename?: 'Work', id: string, title?: string | null, imageUrl?: string | null, recordCount?: number | null, episode?: { __typename?: 'Episode', number: number, postCount?: number | null, userCount?: number | null, suspendedUserCount?: number | null } | null, record?: { __typename?: 'Record', id: string, statusType?: Types.StatusType | null, status?: string | null } | null, episodes?: Array<{ __typename?: 'Episode', number: number, postCount?: number | null }> | null, metadata?: { __typename?: 'WorkMetadata', studioNames?: Array<string> | null, source?: Types.SourceType | null, websiteUrl?: string | null, namuwikiUrl?: string | null, annUrl?: string | null, schedules?: Array<{ __typename?: 'WorkSchedule', country: string, date?: any | null, datePrecision?: Types.DatePrecision | null }> | null } | null, posts: { __typename?: 'PostConnection', hasMore: boolean, nodes: Array<{ __typename?: 'Post', id: string, statusType?: Types.StatusType | null, status?: string | null, comment?: string | null, updatedAt?: any | null, containsSpoiler?: boolean | null, user?: { __typename?: 'User', name?: string | null } | null, record?: { __typename?: 'Record', title?: string | null } | null }> } } | null, weeklyWorksChart: Array<{ __typename?: 'WorksChartItem', rank: number, diff?: number | null, sign?: number | null, work: { __typename?: 'Work', id: string, title?: string | null, imageUrl?: string | null } }> };

export type WorkEpisodeRoute_MorePostsQueryVariables = Types.Exact<{
  workId: Types.Scalars['ID'];
  beforeId?: Types.InputMaybe<Types.Scalars['ID']>;
  episode: Types.Scalars['Int'];
}>;


export type WorkEpisodeRoute_MorePostsQuery = { __typename?: 'Query', work?: { __typename?: 'Work', posts: { __typename?: 'PostConnection', hasMore: boolean, nodes: Array<{ __typename?: 'Post', id: string, statusType?: Types.StatusType | null, status?: string | null, comment?: string | null, updatedAt?: any | null, containsSpoiler?: boolean | null, user?: { __typename?: 'User', name?: string | null } | null, record?: { __typename?: 'Record', title?: string | null } | null }> } } | null };

export type WorkEpisodeRoute_RefetchQueryVariables = Types.Exact<{
  id: Types.Scalars['ID'];
  episode?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type WorkEpisodeRoute_RefetchQuery = { __typename?: 'Query', work?: { __typename?: 'Work', id: string, title?: string | null, imageUrl?: string | null, recordCount?: number | null, record?: { __typename?: 'Record', id: string, statusType?: Types.StatusType | null, status?: string | null } | null, episodes?: Array<{ __typename?: 'Episode', number: number, postCount?: number | null }> | null, metadata?: { __typename?: 'WorkMetadata', studioNames?: Array<string> | null, source?: Types.SourceType | null, websiteUrl?: string | null, namuwikiUrl?: string | null, annUrl?: string | null, schedules?: Array<{ __typename?: 'WorkSchedule', country: string, date?: any | null, datePrecision?: Types.DatePrecision | null }> | null } | null, posts: { __typename?: 'PostConnection', hasMore: boolean, nodes: Array<{ __typename?: 'Post', id: string, statusType?: Types.StatusType | null, status?: string | null, comment?: string | null, updatedAt?: any | null, containsSpoiler?: boolean | null, user?: { __typename?: 'User', name?: string | null } | null, record?: { __typename?: 'Record', title?: string | null } | null }> } } | null };


export const WorkEpisodeRouteDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"WorkEpisodeRoute"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"episode"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"work"},"name":{"kind":"Name","value":"workByTitle"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GqlWorkViews"}},{"kind":"Field","name":{"kind":"Name","value":"episode"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"episode"},"value":{"kind":"Variable","name":{"kind":"Name","value":"episode"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"number"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"GqlWorkViews_episode"}}]}}]}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"WeeklyChart"}}]}},...GqlWorkViewsFragmentDoc.definitions,...GqlWorkViews_EpisodeFragmentDoc.definitions,...WeeklyChartFragmentDoc.definitions]} as unknown as DocumentNode<WorkEpisodeRouteQuery, WorkEpisodeRouteQueryVariables>;
export const WorkEpisodeRoute_MorePostsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"WorkEpisodeRoute_morePosts"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"workId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"beforeId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"episode"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"work"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"workId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GqlWorkViews_morePosts"}}]}}]}},...GqlWorkViews_MorePostsFragmentDoc.definitions]} as unknown as DocumentNode<WorkEpisodeRoute_MorePostsQuery, WorkEpisodeRoute_MorePostsQueryVariables>;
export const WorkEpisodeRoute_RefetchDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"WorkEpisodeRoute_refetch"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"episode"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"work"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GqlWorkViews"}}]}}]}},...GqlWorkViewsFragmentDoc.definitions]} as unknown as DocumentNode<WorkEpisodeRoute_RefetchQuery, WorkEpisodeRoute_RefetchQueryVariables>;