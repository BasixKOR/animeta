---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Express Application/API powered by API Gateway and Lambda
Parameters:
  DomainName:
    Type: String
    Description: API Domain name
    Default: ''
  ConfigSSMParameterName:
    Type: String
    Description: Name of the SSM parameter that contains SecureString of config.json
    Default: '/animeta/frontend-lambda/config.json'

Conditions:
  UseDomainName: !Not
    - !Equals
      - !Ref DomainName
      - ''

Resources:
  ExpressApiV2:
    Type: AWS::Serverless::HttpApi

  ExpressLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/package.zip
      AutoPublishAlias: live
      Handler: app/frontend-server/dist/bundle-lambda.handler
      MemorySize: 512
      Runtime: nodejs16.x
      Timeout: 30
      Tracing: Active
      # Layers:
      #   - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-nodejs-amd64-ver-1-6-0:1
      Environment:
        Variables:
          NODE_ENV: production
          ANIMETA_CONFIG_SSM_PARAMETER_NAME: !Ref ConfigSSMParameterName
          # AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
      Policies:
        - Statement:
          - Sid: SSMGetParameterPolicy
            Effect: Allow
            Action:
            - ssm:GetParameters
            - ssm:GetParameter
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ConfigSSMParameterName}'
      Events:
        ProxyApiRoot:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExpressApiV2

  MyApiCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Condition: UseDomainName
    Properties:
      DomainName: !Sub '*.${DomainName}'
      DomainValidationOptions:
        - DomainName: !Sub '*.${DomainName}'
          ValidationDomain: !Ref DomainName
      SubjectAlternativeNames:
        - !Ref DomainName
      ValidationMethod: DNS

  MyApiDomainName:
    Type: 'AWS::ApiGatewayV2::DomainName'
    Condition: UseDomainName
    Properties:
      DomainName: !Ref DomainName
      DomainNameConfigurations:
        - CertificateArn: !Ref MyApiCertificate
          EndpointType: REGIONAL

  MyApiBasePathMapping:
    Type: 'AWS::ApiGatewayV2::ApiMapping'
    Condition: UseDomainName
    Properties:
      ApiId: !Ref ExpressApiV2
      DomainName: !Ref MyApiDomainName
      Stage: !Ref ExpressApiV2.Stage

  # Route53HostedZone:
  #   Type: AWS::Route53::HostedZone
  #   Condition: UseDomainName
  #   Properties:
  #     Name: !Ref DomainName

  # MyApiRoute53RecordSetGroup:
  #   Type: AWS::Route53::RecordSetGroup
  #   Condition: UseDomainName
  #   Properties:
  #     HostedZoneId: !Ref Route53HostedZone
  #     RecordSets:
  #       - Name: !Sub ${DomainName}.
  #         Type: A
  #         AliasTarget:
  #           EvaluateTargetHealth: false
  #           HostedZoneId: !GetAtt MyApiDomainName.DistributionHostedZoneId
  #           DNSName: !GetAtt MyApiDomainName.DistributionDomainName

Outputs:
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${ExpressLambdaFunction}

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/${ExpressApiV2}/stages/prod

  ApiUrl:
    Description:
      Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value: !Sub https://${ExpressApiV2}.execute-api.${AWS::Region}.amazonaws.com/

  LambdaFunctionName:
    Description: Name of the Serverless Express Lambda Function
    Value: !Ref ExpressLambdaFunction
