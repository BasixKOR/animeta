{"version":3,"sources":["webpack:///library.react.js","webpack:///./animeta/static/js/library.react.js","webpack:///./animeta/static/js/BaseStore.js?7ff9","webpack:///./animeta/static/js/AutoGrowInput.js"],"names":["webpackJsonp","module","exports","__webpack_require__","RecordStore","title","categoryId","BaseStore","call","this","$RecordStore_title","$RecordStore_categoryId","getWorkURL","encodeURIComponent","getRecordStoreState","recordStore","getTitle","getCategoryId","React","AutoGrowInput","BaseStore____Key","hasOwnProperty","____SuperProtoOfBaseStore","prototype","Object","create","constructor","__superConstructor__","setTitle","emitChange","setCategoryId","TitleEditView","createClass","displayName","componentDidMount","typeahead","initTypeahead","refs","titleInput","getDOMNode","on","event","keyCode","handleSave","bind","render","DOM","div","className","input","ref","defaultValue","props","originalTitle","button","onClick","a","href","handleCancel","onSave","value","preventDefault","onCancel","CategoryEditView","name","selectedId","categoryList","filter","category","id","span","label","select","onChange","handleChange","option","map","target","HeaderView","getInitialState","isEditingTitle","titleEditor","state","recordId","handleTitleSave","setState","h1","handleTitleEditButtonClick","handleCategoryChange","$","post","then","StatusInputView","showSuffix","transferPropsTo","minSize","maxSize","_updateSuffix","style","cursor","handlePlusOne","img","src","alt","match","newValue","plusOne","PostComposerView","currentStatus","form","method","data-connected-services","connectedServices","initialStatusType","textarea","rows","cols","autoFocus","type","htmlFor","initServiceToggles","AppView","_onChange","addChangeListener","status","statusType","APP_DATA","renderComponent","document","ajaxError","jqXHR","responseText","err","parseJSON","alert","message","e",34,"$BaseStore_listeners","callback","push","removeChangeListener","cb","data","forEach",93,"size","length","width","Math","max","min"],"mappings":"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","file":"library.react.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 0:\n/*!********************************************!*\\\n  !*** ./animeta/static/js/library.react.js ***!\n  \\********************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @jsx React.DOM */\n\t\n\tvar React = __webpack_require__(/*! react */ 27);\n\tvar BaseStore = __webpack_require__(/*! ./BaseStore */ 34);\n\tvar AutoGrowInput = __webpack_require__(/*! ./AutoGrowInput */ 93);\n\t\n\tfor(var BaseStore____Key in BaseStore){if(BaseStore.hasOwnProperty(BaseStore____Key)){RecordStore[BaseStore____Key]=BaseStore[BaseStore____Key];}}var ____SuperProtoOfBaseStore=BaseStore===null?null:BaseStore.prototype;RecordStore.prototype=Object.create(____SuperProtoOfBaseStore);RecordStore.prototype.constructor=RecordStore;RecordStore.__superConstructor__=BaseStore;\n\t    function RecordStore(title, categoryId) {\"use strict\";\n\t        BaseStore.call(this);\n\t        this.$RecordStore_title = title;\n\t        this.$RecordStore_categoryId = categoryId;\n\t    }\n\t\n\t    RecordStore.prototype.setTitle=function(title) {\"use strict\";\n\t        this.$RecordStore_title = title;\n\t        this.emitChange();\n\t    };\n\t\n\t    RecordStore.prototype.getTitle=function() {\"use strict\";\n\t        return this.$RecordStore_title;\n\t    };\n\t\n\t    RecordStore.prototype.getCategoryId=function() {\"use strict\";\n\t        return this.$RecordStore_categoryId;\n\t    };\n\t\n\t    RecordStore.prototype.setCategoryId=function(categoryId) {\"use strict\";\n\t        this.$RecordStore_categoryId = categoryId;\n\t        this.emitChange();\n\t    };\n\t\n\t\n\tfunction getWorkURL(title) {\n\t    return '/works/' + encodeURIComponent(title) + '/';\n\t}\n\t\n\tvar recordStore;\n\t\n\tvar TitleEditView = React.createClass({displayName: 'TitleEditView',\n\t    componentDidMount:function() {\n\t        var typeahead = initTypeahead(this.refs.titleInput.getDOMNode());\n\t        typeahead.on('keypress', function(event)  {\n\t            if (event.keyCode == 13) {\n\t                this.handleSave();\n\t            }\n\t        }.bind(this));\n\t    },\n\t\n\t    render:function() {\n\t        return (\n\t            React.DOM.div({className: \"title-form\"}, \n\t                React.DOM.input({ref: \"titleInput\", defaultValue: this.props.originalTitle}), \n\t                React.DOM.button({onClick: this.handleSave}, \"저장\"), \n\t                ' ', React.DOM.a({href: \"#\", onClick: this.handleCancel}, \"취소\")\n\t            )\n\t        );\n\t    },\n\t\n\t    handleSave:function() {\n\t        this.props.onSave(this.refs.titleInput.getDOMNode().value);\n\t    },\n\t\n\t    handleCancel:function(event) {\n\t        event.preventDefault();\n\t        this.props.onCancel();\n\t    }\n\t});\n\t\n\tvar CategoryEditView = React.createClass({displayName: 'CategoryEditView',\n\t    render:function() {\n\t        var name = '지정 안함';\n\t        if (this.props.selectedId) {\n\t            name = this.props.categoryList.filter(\n\t                function(category)  {return category.id == this.props.selectedId;}.bind(this)\n\t            )[0].name;\n\t        }\n\t        return (\n\t            React.DOM.span({className: \"category-form btn\"}, \n\t                React.DOM.label(null, \"분류: \"), \n\t                name, \" ▼\", \n\t                React.DOM.select({value: this.props.selectedId, onChange: this.handleChange}, \n\t                    React.DOM.option({value: \"\"}, \"지정 안함\"), \n\t                    this.props.categoryList.map(function(category) \n\t                        {return React.DOM.option({value: category.id}, category.name);}\n\t                    )\n\t                )\n\t            )\n\t        );\n\t    },\n\t\n\t    handleChange:function(event) {\n\t        this.props.onChange(event.target.value);\n\t    }\n\t});\n\t\n\tvar HeaderView = React.createClass({displayName: 'HeaderView',\n\t    getInitialState:function() {\n\t        return {isEditingTitle: false};\n\t    },\n\t\n\t    render:function() {\n\t        var titleEditor;\n\t        if (this.state.isEditingTitle) {\n\t            titleEditor = TitleEditView({\n\t                recordId: this.props.recordId, \n\t                originalTitle: this.props.title, \n\t                onSave: this.handleTitleSave, \n\t                onCancel: function()  {return this.setState({isEditingTitle: false});}.bind(this)});\n\t        } else {\n\t            titleEditor = [\n\t                React.DOM.h1(null, React.DOM.a({href: getWorkURL(this.props.title), className: \"work\"}, this.props.title)),\n\t                React.DOM.a({href: \"#\", className: \"btn btn-edit-title\", onClick: this.handleTitleEditButtonClick}, \n\t                    \"제목 수정\"\n\t                )\n\t            ];\n\t        }\n\t\n\t        return (\n\t            React.DOM.div({className: \"record-detail-header\"}, \n\t                titleEditor, \n\t                React.DOM.a({href: (\"/records/\" + this.props.recordId + \"/delete/\"), className: \"btn btn-delete\"}, \"삭제\"), \n\t                CategoryEditView({categoryList: this.props.categoryList, \n\t                    selectedId: this.props.categoryId, \n\t                    onChange: this.handleCategoryChange})\n\t            )\n\t        );\n\t    },\n\t\n\t    handleTitleEditButtonClick:function(event) {\n\t        event.preventDefault();\n\t        this.setState({isEditingTitle: true});\n\t    },\n\t\n\t    handleTitleSave:function(title) {\n\t        $.post((\"/records/\" + this.props.recordId + \"/update/title/\"), {title: title})\n\t            .then(function(result)  {\n\t                recordStore.setTitle(title);\n\t                this.setState({isEditingTitle: false});\n\t            }.bind(this));\n\t    },\n\t\n\t    handleCategoryChange:function(categoryId) {\n\t        $.post((\"/records/\" + this.props.recordId + \"/update/category/\"), {category: categoryId})\n\t            .then(function(result)  {\n\t                recordStore.setCategoryId(categoryId);\n\t            });\n\t    }\n\t});\n\t\n\tvar StatusInputView = React.createClass({displayName: 'StatusInputView',\n\t    getInitialState:function() {\n\t        return {showSuffix: true};\n\t    },\n\t\n\t    render:function() {\n\t        return React.DOM.span(null, \n\t            this.transferPropsTo(AutoGrowInput({minSize: 3, maxSize: 10, onChange: this._updateSuffix, ref: \"input\"})), \n\t            this.state.showSuffix ? '화' : null, \n\t            React.DOM.span({className: \"plus-one\", style: {cursor: 'pointer'}, onClick: this.handlePlusOne}, \n\t                React.DOM.img({src: \"/static/plus.gif\", alt: \"+1\"})\n\t            )\n\t        );\n\t    },\n\t\n\t    componentDidMount:function() {\n\t        this._updateSuffix();\n\t    },\n\t\n\t    _updateSuffix:function() {\n\t        var input = this.refs.input.getDOMNode();\n\t        this.setState({showSuffix: input.value.match(/^(|.*\\d)$/)});\n\t    },\n\t\n\t    handlePlusOne:function() {\n\t        var input = this.refs.input.getDOMNode();\n\t        var newValue = plusOne(input.value);\n\t        input.value = newValue;\n\t    }\n\t});\n\t\n\tvar PostComposerView = React.createClass({displayName: 'PostComposerView',\n\t    render:function() {\n\t        var currentStatus;\n\t        if (this.props.currentStatus) {\n\t            currentStatus = React.DOM.span({className: \"progress-current\"}, this.props.currentStatus, \" → \");\n\t        }\n\t        return React.DOM.form({className: \"record-detail-update\", method: \"post\", 'data-connected-services': this.props.connectedServices}, \n\t            React.DOM.div({className: \"progress\"}, \n\t                React.DOM.select({name: \"status_type\", defaultValue: this.props.initialStatusType}, \n\t                    React.DOM.option({value: \"watching\"}, \"보는 중\"), \n\t                    React.DOM.option({value: \"finished\"}, \"완료\"), \n\t                    React.DOM.option({value: \"suspended\"}, \"중단\"), \n\t                    React.DOM.option({value: \"interested\"}, \"볼 예정\")\n\t                ), \n\t                ' @ ', \n\t                currentStatus, \n\t                StatusInputView({id: \"id_status\", name: \"status\", \n\t                    defaultValue: plusOne(this.props.currentStatus)})\n\t            ), \n\t            React.DOM.textarea({id: \"id_comment\", name: \"comment\", rows: 3, cols: 30, autoFocus: true}), \n\t            React.DOM.div({className: \"actions\"}, \n\t                '공유: ', \n\t                React.DOM.input({type: \"checkbox\", id: \"id_publish_twitter\", name: \"publish_twitter\"}), \n\t                React.DOM.label({htmlFor: \"id_publish_twitter\"}, \"트위터\"), \n\t                React.DOM.input({type: \"checkbox\", id: \"id_publish_facebook\", name: \"publish_facebook\"}), \n\t                React.DOM.label({htmlFor: \"id_publish_facebook\"}, \"페이스북\"), \n\t                React.DOM.button({type: \"submit\"}, \"기록 추가\")\n\t            )\n\t        );\n\t    },\n\t\n\t    componentDidMount:function() {\n\t        initServiceToggles($(this.getDOMNode()));\n\t    }\n\t});\n\t\n\tfunction getRecordStoreState() {\n\t    return {\n\t        title: recordStore.getTitle(),\n\t        categoryId: recordStore.getCategoryId()\n\t    };\n\t}\n\t\n\tvar AppView = React.createClass({displayName: 'AppView',\n\t    getInitialState:function() {\n\t        return getRecordStoreState();\n\t    },\n\t\n\t    _onChange:function() {\n\t        this.setState(getRecordStoreState());\n\t    },\n\t\n\t    componentDidMount:function() {\n\t        recordStore.addChangeListener(this._onChange);\n\t    },\n\t\n\t    render:function() {\n\t        return React.DOM.div(null, \n\t            HeaderView({\n\t                recordId: this.props.recordId, \n\t                title: this.state.title, \n\t                categoryId: this.state.categoryId, \n\t                categoryList: this.props.categoryList}), \n\t            PostComposerView({\n\t                currentStatus: this.props.status, \n\t                initialStatusType: this.props.statusType, \n\t                connectedServices: this.props.connectedServices})\n\t        );\n\t    }\n\t});\n\t\n\trecordStore = new RecordStore(APP_DATA.title, APP_DATA.categoryId);\n\t\n\tReact.renderComponent(AppView(APP_DATA), $('.library-container')[0]);\n\t\n\t$(document).ajaxError(function(event, jqXHR, settings, thrownError)  {\n\t    if (jqXHR.responseText) {\n\t        try {\n\t            var err = $.parseJSON(jqXHR.responseText);\n\t            alert(err.message);\n\t            return;\n\t        } catch (e) {\n\t        }\n\t    }\n\t    alert('서버 오류로 요청에 실패했습니다.');\n\t});\n\n\n/***/ },\n\n/***/ 34:\n/*!****************************************!*\\\n  !*** ./animeta/static/js/BaseStore.js ***!\n  \\****************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t    function BaseStore() {\"use strict\";\n\t        this.$BaseStore_listeners = [];\n\t    }\n\t\n\t    BaseStore.prototype.addChangeListener=function(callback) {\"use strict\";\n\t        this.$BaseStore_listeners.push(callback);\n\t    };\n\t\n\t    BaseStore.prototype.removeChangeListener=function(callback) {\"use strict\";\n\t        this.$BaseStore_listeners = this.$BaseStore_listeners.filter(function(cb)  {return cb != callback;});\n\t    };\n\t\n\t    BaseStore.prototype.emitChange=function(data) {\"use strict\";\n\t        this.$BaseStore_listeners.forEach(function(callback)  {return callback(data);});\n\t    };\n\t\n\t\n\tmodule.exports = BaseStore;\n\n\n/***/ },\n\n/***/ 93:\n/*!********************************************!*\\\n  !*** ./animeta/static/js/AutoGrowInput.js ***!\n  \\********************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @jsx React.DOM */\n\t\n\tvar React = __webpack_require__(/*! react */ 27);\n\t\n\tvar AutoGrowInput = React.createClass({displayName: 'AutoGrowInput',\n\t    getInitialState:function() {\n\t        return {size: this.props.minSize};\n\t    },\n\t\n\t    componentDidMount:function() {\n\t        this.setState({size: this.getDOMNode().value.length});\n\t    },\n\t\n\t    render:function() {\n\t        var width = Math.max(this.props.minSize, Math.min(this.props.maxSize, this.state.size)) + 'em';\n\t        return this.transferPropsTo(React.DOM.input({onChange: this.handleChange, style: {width: width}}));\n\t    },\n\t\n\t    handleChange:function(event) {\n\t        this.setState({size: event.target.value.length});\n\t    }\n\t});\n\t\n\tmodule.exports = AutoGrowInput;\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** library.react.js\n **/","/** @jsx React.DOM */\n\nvar React = require('react');\nvar BaseStore = require('./BaseStore');\nvar AutoGrowInput = require('./AutoGrowInput');\n\nfor(var BaseStore____Key in BaseStore){if(BaseStore.hasOwnProperty(BaseStore____Key)){RecordStore[BaseStore____Key]=BaseStore[BaseStore____Key];}}var ____SuperProtoOfBaseStore=BaseStore===null?null:BaseStore.prototype;RecordStore.prototype=Object.create(____SuperProtoOfBaseStore);RecordStore.prototype.constructor=RecordStore;RecordStore.__superConstructor__=BaseStore;\n    function RecordStore(title, categoryId) {\"use strict\";\n        BaseStore.call(this);\n        this.$RecordStore_title = title;\n        this.$RecordStore_categoryId = categoryId;\n    }\n\n    RecordStore.prototype.setTitle=function(title) {\"use strict\";\n        this.$RecordStore_title = title;\n        this.emitChange();\n    };\n\n    RecordStore.prototype.getTitle=function() {\"use strict\";\n        return this.$RecordStore_title;\n    };\n\n    RecordStore.prototype.getCategoryId=function() {\"use strict\";\n        return this.$RecordStore_categoryId;\n    };\n\n    RecordStore.prototype.setCategoryId=function(categoryId) {\"use strict\";\n        this.$RecordStore_categoryId = categoryId;\n        this.emitChange();\n    };\n\n\nfunction getWorkURL(title) {\n    return '/works/' + encodeURIComponent(title) + '/';\n}\n\nvar recordStore;\n\nvar TitleEditView = React.createClass({displayName: 'TitleEditView',\n    componentDidMount:function() {\n        var typeahead = initTypeahead(this.refs.titleInput.getDOMNode());\n        typeahead.on('keypress', function(event)  {\n            if (event.keyCode == 13) {\n                this.handleSave();\n            }\n        }.bind(this));\n    },\n\n    render:function() {\n        return (\n            React.DOM.div({className: \"title-form\"}, \n                React.DOM.input({ref: \"titleInput\", defaultValue: this.props.originalTitle}), \n                React.DOM.button({onClick: this.handleSave}, \"저장\"), \n                ' ', React.DOM.a({href: \"#\", onClick: this.handleCancel}, \"취소\")\n            )\n        );\n    },\n\n    handleSave:function() {\n        this.props.onSave(this.refs.titleInput.getDOMNode().value);\n    },\n\n    handleCancel:function(event) {\n        event.preventDefault();\n        this.props.onCancel();\n    }\n});\n\nvar CategoryEditView = React.createClass({displayName: 'CategoryEditView',\n    render:function() {\n        var name = '지정 안함';\n        if (this.props.selectedId) {\n            name = this.props.categoryList.filter(\n                function(category)  {return category.id == this.props.selectedId;}.bind(this)\n            )[0].name;\n        }\n        return (\n            React.DOM.span({className: \"category-form btn\"}, \n                React.DOM.label(null, \"분류: \"), \n                name, \" ▼\", \n                React.DOM.select({value: this.props.selectedId, onChange: this.handleChange}, \n                    React.DOM.option({value: \"\"}, \"지정 안함\"), \n                    this.props.categoryList.map(function(category) \n                        {return React.DOM.option({value: category.id}, category.name);}\n                    )\n                )\n            )\n        );\n    },\n\n    handleChange:function(event) {\n        this.props.onChange(event.target.value);\n    }\n});\n\nvar HeaderView = React.createClass({displayName: 'HeaderView',\n    getInitialState:function() {\n        return {isEditingTitle: false};\n    },\n\n    render:function() {\n        var titleEditor;\n        if (this.state.isEditingTitle) {\n            titleEditor = TitleEditView({\n                recordId: this.props.recordId, \n                originalTitle: this.props.title, \n                onSave: this.handleTitleSave, \n                onCancel: function()  {return this.setState({isEditingTitle: false});}.bind(this)});\n        } else {\n            titleEditor = [\n                React.DOM.h1(null, React.DOM.a({href: getWorkURL(this.props.title), className: \"work\"}, this.props.title)),\n                React.DOM.a({href: \"#\", className: \"btn btn-edit-title\", onClick: this.handleTitleEditButtonClick}, \n                    \"제목 수정\"\n                )\n            ];\n        }\n\n        return (\n            React.DOM.div({className: \"record-detail-header\"}, \n                titleEditor, \n                React.DOM.a({href: (\"/records/\" + this.props.recordId + \"/delete/\"), className: \"btn btn-delete\"}, \"삭제\"), \n                CategoryEditView({categoryList: this.props.categoryList, \n                    selectedId: this.props.categoryId, \n                    onChange: this.handleCategoryChange})\n            )\n        );\n    },\n\n    handleTitleEditButtonClick:function(event) {\n        event.preventDefault();\n        this.setState({isEditingTitle: true});\n    },\n\n    handleTitleSave:function(title) {\n        $.post((\"/records/\" + this.props.recordId + \"/update/title/\"), {title: title})\n            .then(function(result)  {\n                recordStore.setTitle(title);\n                this.setState({isEditingTitle: false});\n            }.bind(this));\n    },\n\n    handleCategoryChange:function(categoryId) {\n        $.post((\"/records/\" + this.props.recordId + \"/update/category/\"), {category: categoryId})\n            .then(function(result)  {\n                recordStore.setCategoryId(categoryId);\n            });\n    }\n});\n\nvar StatusInputView = React.createClass({displayName: 'StatusInputView',\n    getInitialState:function() {\n        return {showSuffix: true};\n    },\n\n    render:function() {\n        return React.DOM.span(null, \n            this.transferPropsTo(AutoGrowInput({minSize: 3, maxSize: 10, onChange: this._updateSuffix, ref: \"input\"})), \n            this.state.showSuffix ? '화' : null, \n            React.DOM.span({className: \"plus-one\", style: {cursor: 'pointer'}, onClick: this.handlePlusOne}, \n                React.DOM.img({src: \"/static/plus.gif\", alt: \"+1\"})\n            )\n        );\n    },\n\n    componentDidMount:function() {\n        this._updateSuffix();\n    },\n\n    _updateSuffix:function() {\n        var input = this.refs.input.getDOMNode();\n        this.setState({showSuffix: input.value.match(/^(|.*\\d)$/)});\n    },\n\n    handlePlusOne:function() {\n        var input = this.refs.input.getDOMNode();\n        var newValue = plusOne(input.value);\n        input.value = newValue;\n    }\n});\n\nvar PostComposerView = React.createClass({displayName: 'PostComposerView',\n    render:function() {\n        var currentStatus;\n        if (this.props.currentStatus) {\n            currentStatus = React.DOM.span({className: \"progress-current\"}, this.props.currentStatus, \" → \");\n        }\n        return React.DOM.form({className: \"record-detail-update\", method: \"post\", 'data-connected-services': this.props.connectedServices}, \n            React.DOM.div({className: \"progress\"}, \n                React.DOM.select({name: \"status_type\", defaultValue: this.props.initialStatusType}, \n                    React.DOM.option({value: \"watching\"}, \"보는 중\"), \n                    React.DOM.option({value: \"finished\"}, \"완료\"), \n                    React.DOM.option({value: \"suspended\"}, \"중단\"), \n                    React.DOM.option({value: \"interested\"}, \"볼 예정\")\n                ), \n                ' @ ', \n                currentStatus, \n                StatusInputView({id: \"id_status\", name: \"status\", \n                    defaultValue: plusOne(this.props.currentStatus)})\n            ), \n            React.DOM.textarea({id: \"id_comment\", name: \"comment\", rows: 3, cols: 30, autoFocus: true}), \n            React.DOM.div({className: \"actions\"}, \n                '공유: ', \n                React.DOM.input({type: \"checkbox\", id: \"id_publish_twitter\", name: \"publish_twitter\"}), \n                React.DOM.label({htmlFor: \"id_publish_twitter\"}, \"트위터\"), \n                React.DOM.input({type: \"checkbox\", id: \"id_publish_facebook\", name: \"publish_facebook\"}), \n                React.DOM.label({htmlFor: \"id_publish_facebook\"}, \"페이스북\"), \n                React.DOM.button({type: \"submit\"}, \"기록 추가\")\n            )\n        );\n    },\n\n    componentDidMount:function() {\n        initServiceToggles($(this.getDOMNode()));\n    }\n});\n\nfunction getRecordStoreState() {\n    return {\n        title: recordStore.getTitle(),\n        categoryId: recordStore.getCategoryId()\n    };\n}\n\nvar AppView = React.createClass({displayName: 'AppView',\n    getInitialState:function() {\n        return getRecordStoreState();\n    },\n\n    _onChange:function() {\n        this.setState(getRecordStoreState());\n    },\n\n    componentDidMount:function() {\n        recordStore.addChangeListener(this._onChange);\n    },\n\n    render:function() {\n        return React.DOM.div(null, \n            HeaderView({\n                recordId: this.props.recordId, \n                title: this.state.title, \n                categoryId: this.state.categoryId, \n                categoryList: this.props.categoryList}), \n            PostComposerView({\n                currentStatus: this.props.status, \n                initialStatusType: this.props.statusType, \n                connectedServices: this.props.connectedServices})\n        );\n    }\n});\n\nrecordStore = new RecordStore(APP_DATA.title, APP_DATA.categoryId);\n\nReact.renderComponent(AppView(APP_DATA), $('.library-container')[0]);\n\n$(document).ajaxError(function(event, jqXHR, settings, thrownError)  {\n    if (jqXHR.responseText) {\n        try {\n            var err = $.parseJSON(jqXHR.responseText);\n            alert(err.message);\n            return;\n        } catch (e) {\n        }\n    }\n    alert('서버 오류로 요청에 실패했습니다.');\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./animeta/static/js/library.react.js\n ** module id = 0\n ** module chunks = 3\n **/","\n    function BaseStore() {\"use strict\";\n        this.$BaseStore_listeners = [];\n    }\n\n    BaseStore.prototype.addChangeListener=function(callback) {\"use strict\";\n        this.$BaseStore_listeners.push(callback);\n    };\n\n    BaseStore.prototype.removeChangeListener=function(callback) {\"use strict\";\n        this.$BaseStore_listeners = this.$BaseStore_listeners.filter(function(cb)  {return cb != callback;});\n    };\n\n    BaseStore.prototype.emitChange=function(data) {\"use strict\";\n        this.$BaseStore_listeners.forEach(function(callback)  {return callback(data);});\n    };\n\n\nmodule.exports = BaseStore;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./animeta/static/js/BaseStore.js\n ** module id = 34\n ** module chunks = 2 3\n **/","/** @jsx React.DOM */\n\nvar React = require('react');\n\nvar AutoGrowInput = React.createClass({displayName: 'AutoGrowInput',\n    getInitialState:function() {\n        return {size: this.props.minSize};\n    },\n\n    componentDidMount:function() {\n        this.setState({size: this.getDOMNode().value.length});\n    },\n\n    render:function() {\n        var width = Math.max(this.props.minSize, Math.min(this.props.maxSize, this.state.size)) + 'em';\n        return this.transferPropsTo(React.DOM.input({onChange: this.handleChange, style: {width: width}}));\n    },\n\n    handleChange:function(event) {\n        this.setState({size: event.target.value.length});\n    }\n});\n\nmodule.exports = AutoGrowInput;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./animeta/static/js/AutoGrowInput.js\n ** module id = 93\n ** module chunks = 3\n **/"],"sourceRoot":""}